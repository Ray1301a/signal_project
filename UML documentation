Documentation : alertSystem : The UML class diagram depicts the hierarchy of alerts in a health monitoring system. At the top of this hierarchy is the Alert superclass, which provides a foundational triggerAlert method 
inherited by all alerts. The subclasses—BloodPressureAlert, ECGAlert, HypotensiveHypoxemiaAlert, and BloodSaturationAlert—each have specific attributes to monitor vital signs and include a checkAlert method to determine 
when an alert should be triggered. These subclasses extend the Alert class, thereby specializing the general alert behavior for their respective health metrics. The arrows in the diagram represent this inheritance, 
illustrating a well-structured approach to organizing the different types of alerts within the system. dataAccess: With continuous data streaming from diverse sources, the system must effectively manage and interact with 
various data inputs. This flexibility is ensured by the robust Data-Access Layer, featuring three listener classes: FileDataListener, WebSocketDataListener, and TCPDataListener. Each class is designed for its specific data 
source, adhering to the DataListener interface to maintain system uniformity and scalability. The DataParser class plays a crucial role in parsing incoming data for further processing. The DataSourceAdapter class then handles 
the processing and storage of this data. This structured approach ensures efficient utilization of diverse data streams, enhancing the system's operational efficacy and adaptability. dataManagement: The Data Storage System is 
designed to manage and contain patient health information within a healthcare facility. It comprises three primary components: DataStorage, PatientData, and DataRetriever. • DataStorage: This is the central repository for all 
patient-related data, securely storing vital signs and historical medical records using encryption to maintain confidentiality. It handles the addition and removal of patient data. • PatientData: This represents individual 
patient records, encompassing vital statistics and comprehensive medical history. It provides mechanisms to access any data, ensuring patient information is readily available. • DataRetriever: This interface allows doctors 
and nurses to access patient information stored within DataStorage. It implements strict security measures to verify that only authorized staff can view or interact with private patient data, preserving patient privacy.
The UML class diagram illustrates the interactions between these components, highlighting the system's commitment to privacy and security to ensure patient data is responsibly handled and accessed solely for medical purposes.
patientID: Data streaming from various sources is vital in healthcare, where accurate linking of datasets to patient profiles is crucial to avoid errors that could affect patient care. The Patient Identifier System addresses 
this with the PatientIdentifier class, which associates unique Patient IDs with the primary hospital database to ensure precise data attribution. The IdentityManager class oversees this process, checking for any 
irregularities. The PatientRecord class contains comprehensive patient details, including medical history and identifying information. Both PatientIdentifier and PatientRecord classes implement the Patient interface,
providing a standardized framework for patient identification. This unified approach ensures seamless data integration and retrieval while maintaining the integrity and consistency of patient information. sequenceDiagram: 
The system monitors continuously track data levels and immediately forward any data exceeding the predetermined threshold to the Alert generator for further analysis. The Alert generator accesses the Data storage to fetch 
historical data, looking for past incidents to understand the context and severity of the current situation. Using this information, it creates a new alert. The generated alert is promptly sent to the medical staff via a 
notification system. The medical staff can either acknowledge the alert, attend to the patient, and manually resolve the alert on the server, or the system will automatically resolve the alert if the patient's condition 
remains stable for a predefined period. The resolved alert is then removed from the system. Finally, the Alert generator updates the Data storage to ensure all information is current and accurate, maintaining an up-to-date 
system. stateDiagram: The system continuously monitors patient data against predefined thresholds. If any data exceeds these thresholds, it generates an alert via the alert generator and promptly notifies the medical team 
of the anomaly. Upon receiving an alert, medical staff can address the situation and provide appropriate treatment. Once the patient has been treated, staff can acknowledge and manually resolve the alert, confirming that 
the conditions triggering the alert no longer exist. Alternatively, if the system detects that the patient's condition has stabilized for a predefined period, it will automatically resolve the alert. This occurs when the 
system determines that the patient's data has returned to acceptable levels, indicating improved health. After resolving the alert, the system updates the data storage to reflect the current status of the patient. 
This ensures that the data storage remains accurate and up-to-date, providing healthcare providers with reliable information for ongoing patient care and monitoring.

